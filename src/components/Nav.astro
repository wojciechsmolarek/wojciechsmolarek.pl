---
import { metaData } from "../config";
import { Icon } from "astro-icon/components";

interface MenuItem {
    name: string;
    items?: { name: string; path: string; }[];
}

const navMenuItems: Record<string, MenuItem> = {
    "/zrealizowane-projekty": { name: "Projekty" },
    "dropdown": {
        name: "Usługi",
        items: [
            { name: 'Konsultacje SEO', path: "/konsultacje-seo" },
            { name: "Audyt techniczny SEO", path: "/audyt-techniczny-seo" },
            { name: "Pozycjonowanie", path: "/pozycjonowanie" },
        ],
    },
    "/blog": { name: "Blog" },
    "/kontakt": { name: "Kontakt" },
};
---
<nav class="lg:mb-16 mb-12 py-5" aria-label="Menu główne" role="navigation">
    <div class="flex flex-col md:flex-row md:items-center justify-between">
        <div class="flex items-center">
            <a href="/" class="text-3xl font-semibold" aria-label="Strona główna - {metaData.title}">
                {metaData.title}
            </a>
        </div>
        <div class="flex flex-row gap-4 mt-6 md:mt-0 md:ml-auto items-center">
            {
                Object.entries(navMenuItems).map(([key, item]) => {
                  if (item.items) {
                    return (
                      <div class="relative">
                        <button 
                            class="hover:text-neutral-800 dark:hover:text-neutral-200 flex items-center relative p-2 rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-neutral-500"
                            aria-haspopup="true"
                            aria-expanded="false"
                            aria-label={`Otwórz menu ${item.name}`}
                            aria-controls={`dropdown-${item.name.toLowerCase()}`}
                        >
                          {item.name}
                           <Icon name="fa6-solid:caret-down" class="ml-1 h-[10px] w-[10px] text-[#1c1c1c] dark:text-[#D4D4D4] align-middle" aria-hidden="true" />
                        </button>
                        <ul 
                            id={`dropdown-${item.name.toLowerCase()}`}
                            class="absolute hidden z-10 mt-2 bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-md shadow-lg min-w-max"
                            aria-label={`Subemnu ${item.name}`}
                            role="menu"
                        >
                          {item.items.map((subItem, index) => (
                            <li role="none">
                                <a href={subItem.path} 
                                    class="block px-4 py-2 text-gray-800 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-700 whitespace-nowrap"
                                    aria-label={`Idź do ${subItem.name}`}
                                    rel="prefetch"
                                    role="menuitem"
                                    tabindex="-1"
                                >
                                    {subItem.name}
                                </a>
                             </li>
                             ))}
                        </ul>
                      </div>
                    );
                  } else {
                    return (
                        <a href={key} class="hover:text-neutral-800 dark:hover:text-neutral-200 flex items-center relative hover:underline" 
                            aria-label={`Idź do ${item.name}`} 
                            rel="prefetch">
                            {item.name}
                        </a>
                    );
                  }
                })
            }
            <button
                id="theme-toggle"
                aria-label="Zmień kolor motywu strony"
                class="flex items-center justify-center transition-opacity duration-300 hover:opacity-90">
                <Icon
                    name="fa6-solid:circle-half-stroke"
                    class="h-[14px] w-[14px] text-[#1c1c1c] dark:text-[#D4D4D4]"
                     aria-hidden="false"
                />
            </button>
        </div>
    </div>
    
    <!-- Aria live region for theme changes -->
    <div id="theme-announcement" aria-live="polite" class="sr-only"></div>
</nav>

<script is:inline define:vars={{ minified: true }}>
    function setTheme(theme) {
        document.dispatchEvent(new CustomEvent("set-theme", { detail: theme }));
    }

    function toggleTheme() {
        const currentTheme = document.documentElement.getAttribute("data-theme");
        const newTheme = currentTheme === "dark" ? "light" : "dark";
        setTheme(newTheme);
        
        // Announce theme change to screen readers
        const announcement = document.getElementById('theme-announcement');
        if (announcement) {
            announcement.textContent = `Motyw zmieniony na ${newTheme === 'dark' ? 'ciemny' : 'jasny'}`;
        }
    }

    document.addEventListener("astro:page-load", () => {
        document
            .getElementById("theme-toggle")
            .addEventListener("click", toggleTheme);
            
        const dropdownButtons = document.querySelectorAll('nav button[aria-haspopup="true"]');
        
        dropdownButtons.forEach(button => {
            const dropdown = button.nextElementSibling;
            
            // Upewnij się, że dropdown istnieje
            if (!dropdown) return;
            
            const dropdownLinks = dropdown.querySelectorAll('a[role="menuitem"]');

            // Dodaj obsługę kliknięcia
            button.addEventListener('click', (e) => {
                e.preventDefault();
                e.stopPropagation();
                
                const isExpanded = button.getAttribute('aria-expanded') === 'true';
                
                // Zamknij wszystkie inne menu
                dropdownButtons.forEach(otherButton => {
                    if (otherButton !== button) {
                        otherButton.setAttribute('aria-expanded', 'false');
                        otherButton.nextElementSibling?.classList.add('hidden');
                        // Ukryj wszystkie linki w innych menu
                        const otherLinks = otherButton.nextElementSibling?.querySelectorAll('a[role="menuitem"]');
                        otherLinks?.forEach(link => link.setAttribute('tabindex', '-1'));
                    }
                });

                // Przełącz stan aktualnego menu
                button.setAttribute('aria-expanded', String(!isExpanded));
                dropdown.classList.toggle('hidden');
                
                // Pokaż/ukryj linki w aktualnym menu
                dropdownLinks.forEach(link => {
                    link.setAttribute('tabindex', !isExpanded ? '0' : '-1');
                });
                
                // Przekieruj focus na pierwszy link jeśli menu się otworzyło
                if (!isExpanded && dropdownLinks.length > 0) {
                    dropdownLinks[0].focus();
                }
            });

            // Obsługa nawigacji klawiaturą na przycisku
            button.addEventListener('keydown', (e) => {
                const isExpanded = button.getAttribute('aria-expanded') === 'true';
                
                switch (e.key) {
                    case 'Escape':
                        if (isExpanded) {
                            button.setAttribute('aria-expanded', 'false');
                            dropdown.classList.add('hidden');
                            dropdownLinks.forEach(link => link.setAttribute('tabindex', '-1'));
                            button.focus();
                        }
                        break;
                    case 'ArrowDown':
                        if (!isExpanded) {
                            e.preventDefault();
                            button.setAttribute('aria-expanded', 'true');
                            dropdown.classList.remove('hidden');
                            dropdownLinks.forEach(link => link.setAttribute('tabindex', '0'));
                            dropdownLinks[0]?.focus();
                        }
                        break;
                    case 'Enter':
                    case ' ':
                        e.preventDefault();
                        button.click();
                        break;
                }
            });

            // Obsługa nawigacji w menu
            dropdownLinks.forEach((link, index) => {
                link.addEventListener('keydown', (e) => {
                    switch (e.key) {
                        case 'ArrowDown':
                            e.preventDefault();
                            const nextLink = dropdownLinks[(index + 1) % dropdownLinks.length];
                            if (nextLink) {
                                nextLink.focus();
                            }
                            break;
                        case 'ArrowUp':
                            e.preventDefault();
                            if (index === 0) {
                                button.focus();
                                button.setAttribute('aria-expanded', 'false');
                                dropdown.classList.add('hidden');
                                dropdownLinks.forEach(link => link.setAttribute('tabindex', '-1'));
                            } else {
                                dropdownLinks[index - 1].focus();
                            }
                            break;
                        case 'Escape':
                            e.preventDefault();
                            button.focus();
                            button.setAttribute('aria-expanded', 'false');
                            dropdown.classList.add('hidden');
                            dropdownLinks.forEach(link => link.setAttribute('tabindex', '-1'));
                            break;
                        case 'Tab':
                            // Zamknij menu przy Tab
                            button.setAttribute('aria-expanded', 'false');
                            dropdown.classList.add('hidden');
                            dropdownLinks.forEach(link => link.setAttribute('tabindex', '-1'));
                            break;
                    }
                });
            });
        });

        // Zamykanie menu po kliknięciu poza
        document.addEventListener('click', (event) => {
            const isClickInsideDropdown = event.target.closest('.relative');
            if (!isClickInsideDropdown) {
                dropdownButtons.forEach(button => {
                    button.setAttribute('aria-expanded', 'false');
                    const dropdown = button.nextElementSibling;
                    dropdown.classList.add('hidden');
                    const links = dropdown.querySelectorAll('a[role="menuitem"]');
                    links.forEach(link => link.setAttribute('tabindex', '-1'));
                });
            }
        });
    });
</script>
