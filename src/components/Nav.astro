---
import { metaData } from "../config";
import { Icon } from "astro-icon/components";

const navItems = {
    "/projects": { name: "Projekty" },
    "dropdown": {
        name: "Usługi",
        items: [
            { name: "Konsultacje SEO", path: "#" },
            { name: "Audyt techniczny SEO", path: "#" },
            { name: "Pozycjonowanie", path: "#" },
        ],
    },
    "/blog": { name: "Blog" },
    "/photos": { name: "Kontakt" },
};
---
<nav class="lg:mb-16 mb-12 py-5" aria-label="Menu główne">
    <div class="flex flex-col md:flex-row md:items-center justify-between">
        <div class="flex items-center">
            <a href="/" class="text-3xl font-semibold" aria-label="Strona główna">
                {metaData.title}
            </a>
        </div>
        <div class="flex flex-row gap-4 mt-6 md:mt-0 md:ml-auto items-center">
            {
                Object.entries(navItems).map(([key, item]) => {
                  if (item.items) {
                    return (
                      <div class="relative" key={key}>
                        <button class="transition-all hover:text-neutral-800 dark:hover:text-neutral-200 flex items-center relative"
                          aria-haspopup="true"
                          aria-expanded="false"
                          aria-label={`Otwóz menu ${item.name}`}
                        >
                          {item.name}
                           <Icon name="fa6-solid:caret-down" class="ml-1 h-[10px] w-[10px] text-[#1c1c1c] dark:text-[#D4D4D4] align-middle" aria-hidden="true" />
                        </button>
                        <ul class="absolute hidden z-10 mt-2 bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-md shadow-lg min-w-max"
                            aria-label={`Subemnu ${item.name}`}
                        >
                          {item.items.map((subItem, index) => (
                            <li key={index}>
                                <a href={subItem.path} class="block px-4 py-2 text-gray-800 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-700 whitespace-nowrap"
                                    aria-label={`Idź do ${subItem.name}`}
                                >
                                    {subItem.name}
                                </a>
                             </li>
                             ))}
                        </ul>
                      </div>
                    );
                  } else {
                    return (
                        <a href={key} class="transition-all hover:text-neutral-800 dark:hover:text-neutral-200 flex items-center relative" aria-label={`Idź do ${item.name}`} key={key}>
                            {item.name}
                        </a>
                    );
                  }
                })
            }
            <button
                id="theme-toggle"
                aria-label="Zmień kolor motywu strony"
                class="flex items-center justify-center transition-opacity duration-300 hover:opacity-90">
                <Icon
                    name="fa6-solid:circle-half-stroke"
                    class="h-[14px] w-[14px] text-[#1c1c1c] dark:text-[#D4D4D4]"
                     aria-hidden="true"
                />
            </button>
        </div>
    </div>
</nav>
<script is:inline>
    function setTheme(theme) {
        document.dispatchEvent(new CustomEvent("set-theme", { detail: theme }));
    }
function toggleTheme() {
    const currentTheme = document.documentElement.getAttribute("data-theme");
    const newTheme = currentTheme === "dark" ? "light" : "dark";
    setTheme(newTheme);
}


document.addEventListener("astro:page-load", () => {
    document
        .getElementById("theme-toggle")
        .addEventListener("click", toggleTheme);
    const dropdownButtons = document.querySelectorAll('nav button[aria-haspopup="true"]');
    dropdownButtons.forEach(button => {
        button.addEventListener('click', () => {
            const dropdown = button.nextElementSibling;
             const isExpanded = button.getAttribute('aria-expanded') === 'true';

            if(isExpanded){
                button.setAttribute('aria-expanded', 'false');
                dropdown.classList.add('hidden');
            } else {
                button.setAttribute('aria-expanded', 'true');
                dropdown.classList.remove('hidden');
            }
        });
    });

     document.addEventListener('click', (event) => {
        if (!event.target.closest('nav button[aria-haspopup="true"]')) {
          document.querySelectorAll('nav button[aria-haspopup="true"]').forEach(button => {
            const dropdown = button.nextElementSibling;
            if(button.getAttribute('aria-expanded') === 'true'){
                 button.setAttribute('aria-expanded', 'false');
                dropdown.classList.add('hidden');
            }
          });
        }
      });
});

</script>
